// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	models "aquaculture/models"

	mock "github.com/stretchr/testify/mock"
)

// FarmConditionRepository is an autogenerated mock type for the FarmConditionRepository type
type FarmConditionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: fcReq
func (_m *FarmConditionRepository) Create(fcReq models.FarmConditionRequest) (models.FarmCondition, error) {
	ret := _m.Called(fcReq)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 models.FarmCondition
	var r1 error
	if rf, ok := ret.Get(0).(func(models.FarmConditionRequest) (models.FarmCondition, error)); ok {
		return rf(fcReq)
	}
	if rf, ok := ret.Get(0).(func(models.FarmConditionRequest) models.FarmCondition); ok {
		r0 = rf(fcReq)
	} else {
		r0 = ret.Get(0).(models.FarmCondition)
	}

	if rf, ok := ret.Get(1).(func(models.FarmConditionRequest) error); ok {
		r1 = rf(fcReq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *FarmConditionRepository) GetAll() ([]models.FarmCondition, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.FarmCondition
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.FarmCondition, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.FarmCondition); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.FarmCondition)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *FarmConditionRepository) GetByID(id string) (models.FarmCondition, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.FarmCondition
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.FarmCondition, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.FarmCondition); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.FarmCondition)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: fcReq, id
func (_m *FarmConditionRepository) Update(fcReq models.FarmConditionRequest, id string) (models.FarmCondition, error) {
	ret := _m.Called(fcReq, id)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 models.FarmCondition
	var r1 error
	if rf, ok := ret.Get(0).(func(models.FarmConditionRequest, string) (models.FarmCondition, error)); ok {
		return rf(fcReq, id)
	}
	if rf, ok := ret.Get(0).(func(models.FarmConditionRequest, string) models.FarmCondition); ok {
		r0 = rf(fcReq, id)
	} else {
		r0 = ret.Get(0).(models.FarmCondition)
	}

	if rf, ok := ret.Get(1).(func(models.FarmConditionRequest, string) error); ok {
		r1 = rf(fcReq, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFarmConditionRepository creates a new instance of FarmConditionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFarmConditionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FarmConditionRepository {
	mock := &FarmConditionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
